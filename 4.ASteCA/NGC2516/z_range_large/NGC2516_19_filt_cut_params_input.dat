################################################################################
#                   *** ASteCA input parameters file ***
#                      Created: [2020-09-21 10:15:02]
#
# This file contains the values of the parameters used by ASteCA functions.
# Any empty line or lines that begin with a # character will be ignored.
#
# * DO NOT modify the ID strings in the first column of each line, these are
#   used by the code to identify the parameters in that line.
# * DO NOT write less values than those required in each line or the code
#   will halt.
#
################################################################################



############################## Input data ######################################

# Read mode
#
# * mode: [nam / num]
#   - nam: names of the data columns. A proper header must be in place.
#   - num: indexes of the data columns (starting with zero). The header must be
#          commented out entirely.
#
#   mode
I0   nam

# Columns for the IDs and (x, y) coordinates.
#
# * id_star, x/ra, y/dec: [str / int]
#   IDs and coordinates.
# * coords: [px / deg]
#   Indicates if the coordinates of the observed frame are in pixels or degrees.
# * project: [y / n]
#   If 'coords=deg' indicate whether to use a sinusoidal projection on the data.
#
#   id_star   x/ra   y/dec   coords   project
I1    DR2Name      RA_ICRS     DE_ICRS    deg  y
#I1       ID     X       Y      px       n

# Columns for the photometry, parallax, proper motions, and radial velocity.
#
# * mag, e_mag: [str]
#   Magnitude and uncertainty.
#   The format is 'X,ID,Y' where 'X' is the name/column number of the magnitude
#   (depends on the 'mode' selected above), 'ID' is the identification number
#   of the corresponding photometric system (IDs for the supported photometric
#   systems are stored in the 'CMD_systs.dat' file), and 'Y' is the name of the
#   filter in that system (also in the 'CMD_systs.dat' file).
# * col, e_col: [str]
#   Color and uncertainty. One color is mandatory.
#   The format is 'X,ID,Y1,Y2' where the same definitions apply and 'Y1', 'Y2'
#   are the names of the magnitudes that make up the color in the order (Y1-Y2).
#   The associated uncertainty (in both cases) is indicated only with the
#   name/column number.
# * plx, pmRa, pmDE, rv: [str / n]
#   Columns for the parallax [mas], proper motions [mas/yr], and radial velocity
#   [km/s]. If a data column is not present use 'n'.
#
#           mag    e_mag
#I2       V,4,Vmag     eV
I2        Gmag,27,Gmag       e_Gmag
#
#               col    e_col
I3   BP-RP,27,G_BPmag,G_RPmag    e_BP-RP
#I3    BV,4,Bmag,Vmag      eBV   
#I3    VI,4,Vmag,Imag      eVI
#UB,4,Umag,Bmag      eUB
#I3    g-r,54,gmag,rmag     e_g-r 
#
#    Parallax         |------ Proper motions -------|    Radial velocity
#    plx    e_plx     pmRA    e_pmRA    pmDE    e_pmDE     rv    e_rv
#I4   Plx    e_Plx     pmRA    e_pmRA    pmDE    e_pmDE     n    n
I4     n        n        n         n       n         n      n       n
################################################################################



######################### Input data processing ################################

# * nanvals: [str]
#   List of strings indicating which entries in the data file should be treated
#   as bad/missing values.
#
#   nanvals
I5  INDEF, NAN, NaN, 99.999, 999.99

# Trim frame?
#
# * name: [str]
#   Name of the cluster that should be trimmed.
# * range: [floats] * 4
#   Input the x,y ranges in the order: xmin, xmax, ymin, ymax
#
#    name    range
I6      n    0. 0. 0. 0.
I6    haf14_match    1000. 3000. 1000. 3000.
#I6    rup41_match    500. 3500. 500. 3500.
#I6    rup42_match    500. 3500. 500. 3500.
#I6    rup152_match    500. 3500. 500. 3500.
################################################################################



####################### Structural functions ###################################

# Fixed values for the center, radius, and/or the number of field regions. If
# the parameter is not to be fixed, use 'n'.
#
# * name: [str / n]
#   Cluster's name (must match the name of the input data file)
# * c_x / c_y: [float / n]
#   Cluster's (x, y) center in pixels or degrees.
# * rad: [float / n]
#   Cluster's radius in pixels or degrees.
# * f_regs: [int / n]
#   Number of field regions to obtain around the cluster.
#
#   name       c_x      c_y      rad     f_regs
S0  CLUSTER      n        n        n          n
S0   GAIA1    101.47 -16.75        n         10
S0   GAIA2     28.12  53.04        n         10
S0   GAIA4    56.368  52.893       n         10
S0   GAIA5   110.7978 -29.719      n         10
S0   GAIA6   122.0979 -23.706      n         10
S0   GAIA7   84.69075  30.4982     n         10
#
#S0   haf14_match    2150  1952   500         10
S0   haf14_match    n  n   500         10
S0   rup41_match    2000  2000   300         10
S0   rup42_match    1847  1907   500         10
S0   rup44_match    2000  2000     n         10
S0   rup152_match   1922  1827   300         10
#
#S0   TRUMP7   111.8416667    -23.95   n         10
S0   TRUMP7   111.82524    -23.96361   n         10

S0 NGC6242_match 253.8849167    -39.4672222  n         10
S0 LYNGA13_match 252.2208333    -43.4333333  n         10
#S0 NGC6192_match 250.0683333    -43.5086111  n         10
S0 LYNGA14_match 253.7641667    -45.2358611   0.1         10

S0 NGC2516_19_filt_cut    n  n   1.5        0

#S0 WLM_GC2   425   400   2000   0

# Center assignment, field density, radius value.
#
# * bandwidth: [float]
#   The bandwidth used by the Gaussian KDE applied to the 2-dimensional (x,y)
#   stars coordinates to estimate the center coordinates. If 'bandwidth=0'
#   then half of Scott's rule is employed (this generally gives good results).
# * mirror: [y / n]
#   Flag to indicate whether to "mirror" the coordinates at the edges of the
#   frame to avoid the low-density KDE artifact. This could hide non-physical
#   lower densities at the edges. Only affects the generated density map plot.
# * NN: [int]
#   Number of closest neighbors used to estimate the per-star densities.
# * field_dens: [min / last / iter / XX% / float>0.]
#   - min: will use the minimum value  in the field density array.
#   - last: will use the last value in the field density array.
#   - iter: the density will be estimated rejecting values in the RDP through an
#     iterative process.
#   - XX%: select the density value at that percentile from the estimated center
#     (the '%' character is necessary, e.g '75%')
#   - float>0: manual value.
# * N_steps: [int]
#   The number of bootstrap steps employed to estimate the uncertainty
#   associated to the radius.
#
#   bandwidth    mirror   NN    field_dens   N_steps
S1         .0         n   100          iter       0

# King profile fitting parameters.
#
# * flag: [y / n]
#   Attempt to fit a King profile to the radial density profile of the defined
#   cluster region.
# * nchains: [int]
#   Number of MCMC chains used in the Bayesian analysis.
# * nruns: [int]
#   Number of MCMC steps used in the Bayesian analysis.
# * nburn: [0.<float<1.]
#   Percentage of chains to throw away as burn-in.
# * rt_max: [0.<float]
#   Factor that determines the maximum value of the tidal radius, compared to
#   the radius obtained in the previous step.
#
#   flag   nchains   nruns  nburn    rt_max
S2     n        20    500    .25        4

# Field stars regions.
#
# * regions: [int / max]
#   Number of field regions around the cluster that the code will try to define.
#   - int: manually set a number of field regions.
#   - max: use the maximum possible number of field regions in the frame.
#
#   regions
S3       10
################################################################################



##################### Uncertainties & A-D analysis #############################

# Error rejection.
#
# * e_mag_max: [float / str]
#   Maximum error value a star can have in its magnitude without being
#   rejected. Use 'n' for no maximum limit.
# * e_col_max: [float / str]
#   Maximum error value a star can have in its color(s) without being rejected.
#   Use 'n' for no maximum limit.
# * e_plx_max / e_pm_max / e_rv_max: [float / str]
#   Idem for parallax / proper motions / radial velocity values. If these data
#   columns are not present (or no maximum limit is desired) use 'n'.
#
#   e_mag_max   e_col_max    e_plx_max     e_pm_max     e_rv_max
E0        0.3      .3            n            n            n

# Anderson-Darling test (cluster vs field regions).
#
# * runs: [int]
#   Number of times the A-D test will run, perturbing through a normal
#   distribution where the associated uncertainties are the standard
#   deviations. Input a value of '0' to skip this test.
#
#   runs
A0   0
################################################################################



####################### Decontamination algorithm ##############################

# Assign membership probabilities (MPs) to stars within the cluster region.
#
# * algor: [bayes / read / skip]
#   - bayes: Bayesian decontamination algorithm. Number of iterations set via
#     the 'runs' parameter.
#   - read: read MPs from an existing file.
#   - skip: all stars are assigned MP=1 (i.e.: no DA applied).
# * runs: [integer>=2]
#   The Bayesian DA will iterate a maximum of 'runs' times or until the MPs
#   converge to within 0.1% values. Minimum value is 2.
#  * w_xxx: [y / n]
#   Turn data dimensions (photometric and kinematic) on/off (y/n) to use in the
#   DA. If more than one color is defined, add more values after 'w_col'.
#
#   algor   runs   w_mag    w_col    w_Plx    w_PMx    w_PMy    w_RV
D0  skip   100      y      y  y      n        n        n       n
################################################################################



########################## Field stars removal #################################

# Cluster region field stars removal.
#
# Performs a selection of stars within the cluster region, to be used by the
# synthetic cluster match function. Possible field stars are removed either
# based on their assigned MPs, or randomly (if MPs are missing).
#
# * mode: [local / n_memb / mp_05 / top_h / man / all]
#   - local: combines the assigned MPs with a cell by cell removal of stars in
#     the photometric diagram. The stars discarded are those of lower MPs and
#     the number is equal to the excess of field stars present in each cell.
#   - n_memb: use the N stars with the highest MPs, where N is the approximate
#     number of members found via the cluster region vs field region star
#     density comparison.
#   - mp_05: selects only those stars with MP>=0.5, i.e.: stars with higher
#     probability of being a cluster member than a field star.
#   - top_h: selects the top half of all stars in the cluster region with the
#     highest MPs.
#   - man: the minimum accepted probability value has to be set manually in the
#    'prob_min' parameter (0, 1).
#   - all: use all stars in the cluster region.
# * binning: [optm / fixed / blocks / blocks-max / auto / fd / doane / scott /
#             rice / sqrt / sturges / knuth]
#   Binning method to be used if the 'local' method is selected. Otherwise
#   this parameter is ignored.
#   - optm: select the number of bins so that the number of stars left are
#     the closest to the estimated number of members as possible. The number of
#     bins in the magnitude is twice the number in the colors.
#   - fixed: Based on Bonatto & Bica (2007; 377, 3, 1301-1323) but using larger
#     values: 0.5 mag for colors and 1. mag for the magnitude.
#   - blocks / knuth: astropy's implementation.
#   - blocks-max: same as 'blocks' but imposing a maximum width of 3. mag for
#     colors and 1. mag for magnitude.
#   - rest: numpy's implementation.
# * prob_min: [0<float<1]
#   Minimum accepted probability value if the 'man' mode was selected.
#
#   mode    binning     prob_min
F0  local      optm          0.5
################################################################################



########################### Parallax and PMs ###################################

# Parallax Bayesian analysis
#
# * plx_bayes_flag: [y / n]
#   Bayesian analysis of parallax data.
# * offset: [float]
#   Offset added to the parallax data.
# * nchains: [int]
#   Number of MCMC chains used in the Bayesian analysis.
# * nruns: [int]
#   Number of MCMC steps used in the Bayesian analysis.
# * nburn: [0.<float<1.]
#   Percentage of chains to throw away as burn-in.
# * mp_flag: [y / n]
#   Use MPs in the parallax analysis?
#
#   plx_flag   offset   nchains   nruns   nburn   mp_flag
P0         n    0.029        10    1000     .25         y

# Proper motions analysis
#
# * KDE_stds: [0.<float]
#   Standard deviations for the zoomed all-star VPD.
# * cosDE_flag: [y / n]
#   Is the pmRA data already multiplied by the 'cos(DE)' factor?
#
#   KDE_stds   cosDE_flag
P1        3.            y
################################################################################



######################## Synthetic clusters generation #########################

# * ran_seed: [int / n]
#   Random seed used in the generation of synthetic clusters. If 'n', an integer
#   will be randomly selected.
#
# * evol_track: [PAR12 / PAR11 / PAR10] + [CS_35 / CS_07 / CPR16 / No]
#   Evolutionary tracks. Combine one of the 'PARSEC' tracks:
#   PAR12 (PARSEC v1.2S), PAR11 (PARSEC v1.1), PAR10 (PARSEC v1.0), with one
#   of the 'Colibri' tracks: CS_35 (COLIBRI S_35), CS_07 (COLIBRI S_07),
#   CPR16 (COLIBRI PR16), No (No limitation in Z), using a '+' sign. For
#   example: 'PAR12+No'.
#
# * IMF: [str]
#   IMF used to populate the synthetic clusters.
#   - kroupa_2002      : Kroupa (2002) 295.82K, Eq. (2) & (3)
#   - chabrier_2001_exp: Chabrier (2001) 554.1274C, Eq (8)
#   - chabrier_2001_log: Chabrier (2001) 554.1274C, Eq (7)
#   - kroupa_1993      : Kroupa et al. (1993) 262.545K, Eq. (13)
#   - salpeter_1955    : Salpeter (1955)
#
# * min_mass_ratio: [0<float<=1]
#   Minimum mass ratio for the generation of binaries.
#
# * Maximum mag: [max / float]
#   Select a maximum magnitude cut to be used in the best fit process. This
#   limit affects both the observed and synthetic cluster.
#   - max: use the maximum observed magnitude (i.e.: no cut is applied).
#   - [float]: manually select the maximum magnitude value to use.
#
#   ran_seed   evol_track           IMF   min_mass_ratio   max_mag
R0        n      PAR12+No   kroupa_2002              0.7       max

# Ranges for all the fundamental parameters
#
# * min / max: [float / string]
#   Minimum / maximum values that define the range of the parameters to fit for
#   the metallicity, log(age), E(B-V), distance modulus, initial mass, and
#   binary fraction, respectively. A single value indicates a fixed parameter.
#   For the [z, log(age)] parameters the strings 'min' and/or 'max' can be used
#   to let ASteCA decide the minimum and/or maximum range limits.
#
#   -Implemented:
#    RZ: metallicity (z), RA: log(age), RE: extinction E(B-V),
#    RD: distance modulus, RM: mass, RB: binary fraction
#   -Semi-implemented:
#    RV: Ratio of total to selective absorption (fixed value)
#   -Not yet implemented:
#    RR: differential reddening
#    RS: blue-stragglers fraction
#
#        min      max
RZ       0.0005  0.0295
RA         7.9 8.5
RE         0.        .3
RR         n
RV        3.1
RD         7.9 8.2
RM       100    5000
RB         0  1.
RS         n
################################################################################



#################### Best fit algorithm parameters #############################

# Algorithm used to explore the parameter space given a likelihood.
#
# * algorithm: ptemcee / n
#
#   - ptemcee: Parallel tempering Bayesian MCMC algorithm.
#   - read   : Read pickle file generated with the 'save_trace' option. The
#              file must exist in the 'input' folder.
#   - n      : No fundamental parameters estimation will be attempted on the
#              observed cluster. All the parameters below are ignored.
#
# * mins_max: [float]
#   Maximum number of minutes the process is allowed to run.
# * save_trace: [y / n]
#   Save MCMC trace to file?
#
#   algorithm   mins_max  save_trace
B0    ptemcee       60          y

# ptemcee parameters.
#
#   - nsteps: [int], Number of steps used.
#   - nwalkers: [int], Number of walkers/chains used.
#   - nburn: [0<float<1], percentage of the chain discarded as burn-in.
#   - ntemps: [int], Number of parallel temperatures (ptemcee only).
#   - Tmax: [float] / inf / n, maximum temperature value (ptemcee only).
#   - adapt: [y / n], turn on-off the adaptive (dynamic) temperature selection
#     (ptemcee only).
#
#   nsteps   nwalkers   nburn   ntemps   Tmax   adapt
B1    5000         20     .25   20     20       y

# Priors
#
#   - prior: u / g, uniform (u) or Gaussian (g) prior distributions for the
#     fitted parameters.
#   - mean/stddev: only required if the 'g' prior is used.
#
#     prior      mean      stddev
BZ       u    0.0152       0.005
BA       u         8         0.5
BE       u       0.5        0.02
BR       n
BV       n
BD       u        14         0.5
BM       u      1000         500
BB       u       0.5         0.2
BS       n

# Likelihood.
#
# * likelihood: tremmel / dolphin / tolstoy
#
#   - tremmel: uses the 'Poisson likelihood ratio' defined in Tremmel et al.
#     (2013); Eq. 10 (with v_{i,j}=1).
#   - dolphin: uses the 'Poisson likelihood ratio' defined in Dolphin (2002);
#     Eq. 10.
#   - tolstoy: weighted bin-free statistic as that defined in Tolstoy & Saha
#     (1996), Monteiro et al (2010) and Hernández & Valls-Gabaud (2008).
#
# * binning: fixed / manual / blocks / blocks-max / auto / fd / doane / scott /
#            rice / sqrt / sturges / knuth
#   Binning method used for the 'tremmel' and 'dolphin' likelihoods.
#   Otherwise this parameter is ignored.
#
# * N_bins: [int]
#   Number of bins for each photometric dimension if the 'manual' binning mode
#   is selected. The order is: 'N_bin_mag N_bin_color' (add another
#   'N_bin_color' if two colors are employed).
#
#   likelihood    binning    N_bins
B2     tremmel      knuth      5 10
################################################################################



############################## Output ##########################################

# Create output figures?
#
# * blocks: [A1, A2, A3, B1, B2, B3, C1, C2, C3, D1, D2, D3]
#   Select one or more identifier to decide which plots will be produced. Leave
#   empty for no output plots. An 's' character after an identifier will make
#   the code stop and return right after creating that plot. I.e.: the line
#   'A1 B1 s B2 C1' will make the code create the 'A1' and 'B1' plots and stop
#   right after 'B1'. If we use 'A1 B1 B2 C1' then those four plots will be
#   generated and the code will keep running until the end.
#
#   - A1: structural density maps
#   - A2: center and field density analysis
#   - A3: radius analysis
#   - B1: uncertainties analysis
#   - B2: photometric data analysis
#   - B3: Anderson-Darling test
#   - C1: decontamination algorithm photometric diagrams
#   - C2: parallax analysis
#   - C3: proper motions analysis
#   - D1: convergence diagnostics
#   - D2: corner plot for the fundamental parameters
#   - D3: best fit synthetic cluster found
#
#   blocks
O0   D1 D2 D3

# * plot_style: [asteca / any style supported by matplotlib]
#   To display a list of supported styles, use:
#   > import matplotlib.pyplot as plt;print(plt.style.available)
#   You can use your own 'matplotlibrc' file storing it in the top folder.
#   Any parameter in that file will overwrite the parameters in the selected
#   style below.
#
#   plot_style
O1     asteca
################################################################################
